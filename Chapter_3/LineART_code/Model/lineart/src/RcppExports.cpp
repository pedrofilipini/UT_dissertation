// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bcfoverparRcppClean
List bcfoverparRcppClean(arma::vec y_, arma::mat Omega_con, arma::mat Omega_mod, arma::mat Omega_con_est, arma::mat Omega_mod_est, NumericVector x_con_, NumericVector x_mod_, NumericVector x_con_est_, NumericVector x_mod_est_, List x_con_info_list, List x_mod_info_list, arma::mat random_des, arma::mat random_var, arma::mat random_var_ix, double random_var_df, int burn, int nd, int thin, int ntree_mod, int ntree_con, double lambda, double nu, arma::mat Sigma0_con, arma::mat Sigma0_mod, double con_alpha, double con_beta, double mod_alpha, double mod_beta, CharacterVector treef_name_, bool prior_sample, bool use_con_scale, bool use_mod_scale, double con_scale_df, double mod_scale_df, int status_interval, bool linear_mod, bool linear_con, bool save_trees, bool dart, int g_con, int g_mod, NumericVector var_sizes_con, NumericVector var_sizes_mod);
RcppExport SEXP _lbart_bcfoverparRcppClean(SEXP y_SEXP, SEXP Omega_conSEXP, SEXP Omega_modSEXP, SEXP Omega_con_estSEXP, SEXP Omega_mod_estSEXP, SEXP x_con_SEXP, SEXP x_mod_SEXP, SEXP x_con_est_SEXP, SEXP x_mod_est_SEXP, SEXP x_con_info_listSEXP, SEXP x_mod_info_listSEXP, SEXP random_desSEXP, SEXP random_varSEXP, SEXP random_var_ixSEXP, SEXP random_var_dfSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_modSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP Sigma0_conSEXP, SEXP Sigma0_modSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP mod_alphaSEXP, SEXP mod_betaSEXP, SEXP treef_name_SEXP, SEXP prior_sampleSEXP, SEXP use_con_scaleSEXP, SEXP use_mod_scaleSEXP, SEXP con_scale_dfSEXP, SEXP mod_scale_dfSEXP, SEXP status_intervalSEXP, SEXP linear_modSEXP, SEXP linear_conSEXP, SEXP save_treesSEXP, SEXP dartSEXP, SEXP g_conSEXP, SEXP g_modSEXP, SEXP var_sizes_conSEXP, SEXP var_sizes_modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con(Omega_conSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_mod(Omega_modSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con_est(Omega_con_estSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_mod_est(Omega_mod_estSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_(x_mod_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_est_(x_con_est_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_mod_est_(x_mod_est_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< List >::type x_mod_info_list(x_mod_info_listSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_des(random_desSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var(random_varSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type random_var_ix(random_var_ixSEXP);
    Rcpp::traits::input_parameter< double >::type random_var_df(random_var_dfSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_mod(ntree_modSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0_con(Sigma0_conSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0_mod(Sigma0_modSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_alpha(mod_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type mod_beta(mod_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< bool >::type prior_sample(prior_sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_con_scale(use_con_scaleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_mod_scale(use_mod_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type con_scale_df(con_scale_dfSEXP);
    Rcpp::traits::input_parameter< double >::type mod_scale_df(mod_scale_dfSEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    Rcpp::traits::input_parameter< bool >::type linear_mod(linear_modSEXP);
    Rcpp::traits::input_parameter< bool >::type linear_con(linear_conSEXP);
    Rcpp::traits::input_parameter< bool >::type save_trees(save_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type dart(dartSEXP);
    Rcpp::traits::input_parameter< int >::type g_con(g_conSEXP);
    Rcpp::traits::input_parameter< int >::type g_mod(g_modSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_sizes_con(var_sizes_conSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type var_sizes_mod(var_sizes_modSEXP);
    rcpp_result_gen = Rcpp::wrap(bcfoverparRcppClean(y_, Omega_con, Omega_mod, Omega_con_est, Omega_mod_est, x_con_, x_mod_, x_con_est_, x_mod_est_, x_con_info_list, x_mod_info_list, random_des, random_var, random_var_ix, random_var_df, burn, nd, thin, ntree_mod, ntree_con, lambda, nu, Sigma0_con, Sigma0_mod, con_alpha, con_beta, mod_alpha, mod_beta, treef_name_, prior_sample, use_con_scale, use_mod_scale, con_scale_df, mod_scale_df, status_interval, linear_mod, linear_con, save_trees, dart, g_con, g_mod, var_sizes_con, var_sizes_mod));
    return rcpp_result_gen;
END_RCPP
}
// lbartRcpp
List lbartRcpp(arma::vec y_, arma::mat Omega_con, arma::mat Omega_con_est, NumericVector x_con_, NumericVector x_con_est_, List x_con_info_list, int burn, int nd, int thin, int ntree_con, double lambda, double nu, arma::mat Sigma0_con, double con_alpha, double con_beta, CharacterVector treef_name_, bool prior_sample, bool use_con_scale, double con_scale_df, int status_interval);
RcppExport SEXP _lbart_lbartRcpp(SEXP y_SEXP, SEXP Omega_conSEXP, SEXP Omega_con_estSEXP, SEXP x_con_SEXP, SEXP x_con_est_SEXP, SEXP x_con_info_listSEXP, SEXP burnSEXP, SEXP ndSEXP, SEXP thinSEXP, SEXP ntree_conSEXP, SEXP lambdaSEXP, SEXP nuSEXP, SEXP Sigma0_conSEXP, SEXP con_alphaSEXP, SEXP con_betaSEXP, SEXP treef_name_SEXP, SEXP prior_sampleSEXP, SEXP use_con_scaleSEXP, SEXP con_scale_dfSEXP, SEXP status_intervalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con(Omega_conSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Omega_con_est(Omega_con_estSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_(x_con_SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_con_est_(x_con_est_SEXP);
    Rcpp::traits::input_parameter< List >::type x_con_info_list(x_con_info_listSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< int >::type nd(ndSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< int >::type ntree_con(ntree_conSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma0_con(Sigma0_conSEXP);
    Rcpp::traits::input_parameter< double >::type con_alpha(con_alphaSEXP);
    Rcpp::traits::input_parameter< double >::type con_beta(con_betaSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type treef_name_(treef_name_SEXP);
    Rcpp::traits::input_parameter< bool >::type prior_sample(prior_sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type use_con_scale(use_con_scaleSEXP);
    Rcpp::traits::input_parameter< double >::type con_scale_df(con_scale_dfSEXP);
    Rcpp::traits::input_parameter< int >::type status_interval(status_intervalSEXP);
    rcpp_result_gen = Rcpp::wrap(lbartRcpp(y_, Omega_con, Omega_con_est, x_con_, x_con_est_, x_con_info_list, burn, nd, thin, ntree_con, lambda, nu, Sigma0_con, con_alpha, con_beta, treef_name_, prior_sample, use_con_scale, con_scale_df, status_interval));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP cplbart(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP cpwbart(SEXP, SEXP, SEXP);
RcppExport SEXP _rcpp_module_boot_treesample_module();

static const R_CallMethodDef CallEntries[] = {
    {"_lbart_bcfoverparRcppClean", (DL_FUNC) &_lbart_bcfoverparRcppClean, 43},
    {"_lbart_lbartRcpp", (DL_FUNC) &_lbart_lbartRcpp, 20},
    {"_rcpp_module_boot_treesample_module", (DL_FUNC) &_rcpp_module_boot_treesample_module, 0},
    {"cplbart", (DL_FUNC) &cplbart, 4},
    {"cpwbart", (DL_FUNC) &cpwbart, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_lbart(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
